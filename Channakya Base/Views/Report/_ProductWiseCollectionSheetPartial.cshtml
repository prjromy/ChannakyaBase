@model  List<ChannakyaBase.Model.ViewModel.ProductWiseCollectionSheet>
@using ChannakyaBase.BLL
@using ChannakyaBase.BLL.Service
@using MoreLinq
@{
    CommonService cmService = new CommonService();
    var distinctProduct = Model.DistinctBy(x => x.PID).ToList();
    var distinctCollector = Model.DistinctBy(x => x.EmployeeId).ToList();
    var distinctProductAmount = Model.GroupBy(x => x.PID).ToList();

    decimal TotalColectorWiseSum = 0;
    var fromDate = Convert.ToDateTime(ViewBag.fromDate).ToShortDateString();
    var toDate = Convert.ToDateTime(ViewBag.ToDate).ToShortDateString();

}

<div class="box box-success">

    <div class="bodycontent-and-paging">
        <div class="box-body">
            @{var hasChild = Model.Count(); }
            @if (hasChild == 0)
            {
                <b> No Childs found to Display</b>
            }
            else
            {
                <div class="listTable" style="max-height:400px;overflow:auto;">
                    <div class="container col-md-12">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive">

                                    <table id="mytable" class="table table-bordred table-striped">

                                        <tr>
                                            <th>
                                                Employee/Product
                                            </th>
                                            @foreach (var item in distinctProduct)
                                            {
                                                <th>
                                                    @item.PName
                                                </th>
                                            }
                                            <td>Total</td>
                                        </tr>
                                        @foreach (var item1 in distinctCollector)
                                        {
                                            decimal TotalColectorWise = 0;
                                            <tr>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item1.EmployeeName)
                                                </td>
                                                @foreach (var item2 in distinctProduct)
                                                {
                                                    <td style="text-align:right">
                                                        @{ var productAmount = Model.Where(x => x.EmployeeId == item1.EmployeeId && x.PID == item2.PID).FirstOrDefault();}
                                                        @if (productAmount != null)
                        {
                                                            <span> @Convert.ToDecimal(productAmount.TotalAmount).ToString("0,0.00", System.Globalization.CultureInfo.InvariantCulture)</span>
                                                            TotalColectorWise += Convert.ToDecimal(productAmount.TotalAmount);
                                                        }
                                                        else
                                                        {
                                                            <span>0.00</span>
                                                        }

                                                    </td>
                                                            }

                                                <th style="text-align:right">@TotalColectorWise.ToString("0,0.00", System.Globalization.CultureInfo.InvariantCulture)</th>
                                            </tr>
                                                            }
                                        <tr>
                                            <td style="font-weight:bold;font-style:italic">
                                                Total
                                            </td>
                                            @foreach (var item3 in distinctProduct)
                                            {
                                                var productWise = Model.Where(x => x.PID == item3.PID).GroupBy(x => x.EmployeeId).ToList();
                                                decimal ProductWiseTotal = 0;
                                                foreach (var items in productWise)
                                                {
                                                    ProductWiseTotal += items.Select(x => x.TotalAmount.Value).FirstOrDefault();
                                                }
                                                <td style="text-align:right">

                                                    @ProductWiseTotal.ToString("0,0.00", System.Globalization.CultureInfo.InvariantCulture)
                                                </td>
                                                TotalColectorWiseSum += ProductWiseTotal;
                                            }
                                            <th style="text-align:right">@TotalColectorWiseSum.ToString("0,0.00", System.Globalization.CultureInfo.InvariantCulture)</th>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                                                            }


        </div><!-- /.box-body -->
        @if (ViewBag.CountPager > 0)
        {
            <ul class="pagination Productpagination" style="float:left;margin-right:20px;">
                <li class="previous"><a href="#">Previous</a></li>

                @for (int i = 1; i <= ViewBag.CountPager; i++)
                {
                    if (i > 4)
                    {
                        if (i == ViewBag.ActivePager)
                        {
                            <li id=@i class="pagerClass active"><a>@i</a> </li>
                        }
                        else
                        {
                            if (i >= (ViewBag.ActivePager - 2))
                            {

                                if (i > ViewBag.ActivePager)
                                {
                                    if (i - ViewBag.ActivePager <= 2)
                                    {
                                        <li id=@i class="pagerClass"><a>@i</a> </li>
                                    }
                                    else
                                    {
                                        if (i == ViewBag.CountPager)
                                        {
                                            if (ViewBag.CountPager - ViewBag.ActivePager > 3)
                                            {
                                                <li class=""><a>.......</a> </li>
                                            }
                                            <li id=@i class="pagerClass"><a>@i</a> </li>
                                        }
                                        <li id=@i class="pagerClass" style="display:none;"><a>@i</a> </li>
                                    }
                                }
                                else
                                {

                                    <li id=@i class="pagerClass"><a>@i</a> </li>
                                }

                            }
                            else
                            {
                                <li id=@i class="pagerClass" style="display:none;"><a>@i</a> </li>
                            }
                        }
                    }
                    else
                    {
                        if (i == ViewBag.ActivePager)
                        {
                            <li id=@i class="pagerClass active"><a>@i</a> </li>
                        }
                        else
                        {
                            if (i >= (ViewBag.ActivePager - 2))
                            {
                                <li id=@i class="pagerClass"><a>@i</a> </li>
                            }
                            else
                            {
                                <li id=@i class="pagerClass" style="display:none;"><a>@i</a> </li>
                            }
                        }
                    }
                }
                <li class="next"><a href="#">Next</a></li>

            </ul>

            <div style="margin-top:20px;margin-left:20px" class="search-container">
                @Html.TextBox("SearchPager", null, new { @class = "form-control searchPager", @style = "width:65px;", @placeholder = "PageNo" })
            </div>
        }
    </div>

</div>

<script>
    $(document).ready(function () {
        //var searchInput = $('input.btn.btn-box-tool.txtSearch');
        //var strLength = searchInput.val().length * 2;
        //searchInput.focus();
        //searchInput[0].setSelectionRange(strLength, strLength);
        //var Search = $('.txtSearch').val();
        var FromDate = $('#FromDate').val();
        var ToDate = $('#ToDate').val();

        $('.pagination').on('click', 'li.next , li.previous', function () {
            debugger;
            var cls = $(this).attr('class');
            if ($(this).attr('class') == 'next') {
                debugger;
                var pager = $('ul.pagination.Productpagination').find('.active').attr('id');
                var finalId = parseInt(pager) + 1;
                var hasNext = $('ul.pagination.Productpagination').find('li#' + finalId)
                if ($(hasNext).length > 0) {
                    var container = $(this).closest('.product-wise-collection-index').find('.product-wise-collection-details').find('.bodycontent-and-paging');
                    var listType = $(this).closest('.Product-explore').find('#viewType').val();

                    $.ajax({
                        url: "/Report/_ProductWiseCollectionSheetPartial",
                        type: "GET",
                        data: {
                            FDate: FromDate,
                            TDate: ToDate,
                            page: finalId
                        },
                        success: function (data) {
                            debugger;
                            $(container).html(data);
                        }

                    });
                    //$(container).load("/Report/_CollectionSheetReportPartial", {FDate:FromDate,TDate:ToDate, page: finalId, search: Search });

                    var checkActive = $('ul.pagination.Productpagination').find('li').hasClass('active');
                    if (checkActive == true) {
                        $('ul.pagination.Productpagination').find('.active').removeClass('active');
                    }
                    $('ul.pagination.Productpagination').find('li#' + finalId).addClass('active');
                }
            }
            else {
                debugger;
                var pager = $('ul.pagination.Productpagination').find('.active').attr('id');
                var finalId = parseInt(pager) - 1;
                var hasPrev = $('ul.pagination.Productpagination').find('li#' + finalId)
                var listType = $(this).closest('.Product-explore').find('#viewType').val();
                if ($(hasPrev).length > 0) {
                    var container = $(this).closest('.product-wise-collection-index').find('.product-wise-collection-details').find('.bodycontent-and-paging');

                    $.ajax({
                        url: "/Report/_ProductWiseCollectionSheetPartial",
                        type: "GET",
                        data: {
                            FDate: FromDate,
                            TDate: ToDate,
                            page: finalId
                        },
                        success: function (data) {
                            debugger;
                            $(container).html(data);
                        }

                    });
                    //$(container).load("/Report/_CollectionSheetReportPartial", { page: finalId, ViewType: listType, query: Search });

                    var checkActive = $('ul.pagination.Productpagination').find('li').hasClass('active');
                    if (checkActive == true) {
                        $('ul.pagination.Productpagination').find('.active').removeClass('active');
                    }
                    $('ul.pagination.Productpagination').find('li#' + finalId).addClass('active');

                }
            }

        });
        $('.search-container').on('change', '.searchPager', function () {
            debugger;
            var finalId = $(this).val();
            //var pagingData = $(this).val();
            var listType = $(this).closest('.Product-explore').find('#viewType').val();
            var container = $(this).closest('.product-wise-collection-index').find('.product-wise-collection-details').find('.bodycontent-and-paging');
            if (isNaN(finalId) == false || finalId != 0) {
                $.ajax({
                    url: "/Report/_ProductWiseCollectionSheetPartial",
                    type: "POST",
                    data: {
                        FDate: FromDate,
                        TDate: ToDate,
                        page: finalId
                    },
                    success: function (data) {
                        debugger;
                        $(container).html(data);
                        $(container).focus();

                        var checkActive = $('ul.pagination.Productpagination').find('li').hasClass('active');
                        if (checkActive == true) {
                            $('ul.pagination.Productpagination').find('.active').removeClass('active');
                        }
                        $('ul.pagination.Productpagination').find('li#' + finalId).addClass('active');
                    }

                });
            }

        });
        $('.pagination').on('click', '.pagerClass', function () {
            debugger;
            var finalId = $(this).attr('id');
            var pagingData = $(this).attr('id');
            var container = $(this).closest('.product-wise-collection-index').find('.product-wise-collection-details').find('.bodycontent-and-paging');
            var listType = $(this).closest('.Product-explore').find('#viewType').val();
            $.ajax({
                url: "/Report/_ProductWiseCollectionSheetPartial",
                type: "GET",
                data: {
                    FDate: FromDate,
                    TDate: ToDate,
                    page: finalId
                },
                success: function (data) {
                    debugger;
                    $(container).html(data);
                    var checkActive = $('ul.pagination.Productpaginatoin').find('li').hasClass('active');
                    if (checkActive == true) {
                        $('ul.pagination.Productpaginatoin').find('.active').removeClass('active');
                    }
                    $('ul.pagination.Productpaginatoin').find('li#' + finalId).addClass('active');

                }

            });

        });
        //$('.txtSearch').change(function () {
        //    debugger;
        //    var finalId = 1;
        //    var Search = $(this).val();

        //    //var pagingData = $(this).val();
        //    var container = $(this).closest('.collection-transaction-index').find('.collection-transaction-details').find('.bodycontent-and-paging');

        //    $.ajax({
        //        url: "/Report/_CollectionSheetReportPartial",
        //        type: "POST",
        //        data: {
        //            FDate: FromDate,
        //            TDate: ToDate,
        //            page: finalId,
        //            search: Search
        //        },
        //        success: function (data) {
        //            debugger;
        //            $(container).html(data);
        //            $(container).focus();

        //        }

        //    });


        //});
    });


</script>

<style>
    .details {
        width: 30%;
        max-height: 129px;
    }

    input.btn.btn-box-tool.txtSearch {
        cursor: text;
    }
</style>
