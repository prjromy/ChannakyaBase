@model ChannakyaBase.Model.ViewModel.AWtdQueueModel

@using ChannakyaBase.BLL
@using ChannakyaBase.BLL.CustomHelper;
@using ChannakyaBase.BLL.Service
@using Loader.Models;
@{

    CommonService cs = new CommonService();
    TellerService ts = new TellerService();
    BaseTaskVerificationService taskUow = new BaseTaskVerificationService();
    var cashier = taskUow.UserCashLimtVerification().Where(x => x.UserId == Global.UserId).FirstOrDefault();
    var tailer = taskUow.UserCashLimtTellerVerification().Where(x => x.UserId == Global.UserId).FirstOrDefault();

    var mod = Model;
   
}
<div class="table table-responsive table-hover table-cash-limit-exceed">
    <table class="table table-striped table-bordered table-responsive">
        <tbody>

            <tr>
                <th>Account Number</th>

                <th>Account Name</th>
                <th>Cheque No/Slip No</th>
                <th>Transaction Date</th>
                <th>Payee </th>
                <th>Amount</th>
                <th>Type</th>
                <th>Status</th>


            </tr>
            @foreach (var item in Model.TellerExceedList)
            {
                <tr>
                    <td>
                        <span class="control-label">@item.AccountNumber</span>
                    </td>
                    <td>
                        <span class="control-label">@item.AccountName</span>
                    </td>
                    <td>
                        <span class="control-label">@item.chqno</span>
                    </td>
                    @{
                        CommonService commonServices = new CommonService();
                    }
                    <td>
                        <span class="control-label">@commonServices.GetDate(item.tdate)</span>
                    </td>
                    <td>
                        <span class="control-label">@item.notes</span>
                    </td>
                    <td>
                        <span class="control-label">@item.amount.ToString("0,0.00", System.Globalization.CultureInfo.InvariantCulture)</span>
                    </td>
                    <td>
                        <span class="control-label">@TellerUtilityService.GetTType(Convert.ToInt32(item.ttype), item.isslip)</span>
                    </td>
                    @if (tailer != null)
                    {
                        <td>
                            <input type="button" value="Withdraw Transaction" class="btn btn-sm btn-success btn-user-cash-limit-Payment" onclick="withdrawPayment(@item.Rno,@BaseTaskUtilityService.TaskIdByEventIdAndEventValue(12, Convert.ToInt64(item.Rno)),'controlAction')">
                        </td>
                    }

                    @if (cashier != null)
                    {
                        <td>
                            <input type="button" value="Verify" class="btn btn-sm btn-success btn-user-cash-limit-only" onclick="directToRead(@BaseTaskUtilityService.TaskIdByEventIdAndEventValue(11, Convert.ToInt64(item.Rno)))">
                        </td>
                    }
                    @if (tailer == null && cashier == null)
                    {
                        <td>
                            @if (item.Qstate == 1 && cs.IsAuthotityToVerify(Convert.ToInt64(item.Rno), 11))
                            {
                                @*<button type="button" class="NotVerified">Not Verified by Cashier</button>*@
                                // <span style="color:red">Not verify by Cashier</span>


                                var eventId = 11;
                                // int eventId = ts.GetEventIdFromRNO(item.Rno);
                                int task1Id = ts.GetTask1IdFromRNO(item.Rno, eventId);
                                // int Rno = Model.Rno;

                                <a href="#" class="btn btn-adn btn-success" onclick="directToRead(@task1Id,@eventId)">
                                    <i class="fa fa-check" aria-hidden="true"></i>Verify
                                </a>

                            }
                            else if (item.Qstate == 2)
                            {
                                //&& cs.IsAuthotityToVerify(Convert.ToInt64(item.Rno), 11)

                                // if global user id eual to raised by then display
                                int user = Global.UserId;
                                int currencyId = cs.DefultCurrency();
                                string denoInOut = EDeno.DenoOut.GetDescription();
                                var eventId = 12;
                                // int eventId = ts.GetEventIdFromRNO(item.Rno);
                                int task1Id = ts.GetTask1IdFromRNOAndVerified(item.Rno, eventId);
                                int raisedto = ts.GetTaskRaisedToFromTask1Id(task1Id);
                                //int task1Id = ts.GetTask1IdFromRNOAndVerified(item.Rno, eventId);
                                // int Rno = Model.Rno;
                                if (user == raisedto)
                                {
                                    <button type="button" class="btn btn-info btn-sm " onclick="directToDeno(@task1Id,@eventId,@item.Rno)">Ready to withdraw<i class="fa fa-info-circle" aria-hidden="true"></i></button>
                                }

                                // rno = eventvalue, eventId = Model.EventId, taskId = Model.Task1Id
                                ////onclick = "directToRead(@item.Task1Id,@item.EventId,@item.EventValue,'@message','TaskMain')"
                            }
                        </td>
                    }

                </tr>
            }



        </tbody>

    </table>


    @Html.Paging("_TellerExceedPayment", "Teller", Model.TellerExceedList.PageCount, Model.TellerExceedList.PageNumber, Model.TellerExceedList.PageSize)
</div>

<script>



    function directToDeno(task1id, eventId, eventValue) {
        debugger;
        var urlToDirect;

        debugger
        var eId = eventId;
        urlToDirect = "/TaskVerification/_VerificationModal";
        if (eId == 10) {
            $.ajax({
                type: "GET",
                url: "/Teller/CollectionSheetIndex",
                data: { retId: eventValue, taskId: task1id, message: message },
                success: function (result) {
                    $(".content").html(result)
                },
                error: function () {

                }
            });
        }

        else if (eId == 17) {
            $.ajax({
                type: "GET",
                //url: "/Credit/LoanRegistrationVerifyDetails",
                url: urlToDirect,
                //data: { regId: eventValue, taskId: task1id },
                data: { task1id: task1id },
                success: function (result) {

                    $('#getTaskVerficationLists').html(result).modal({
                        'show': true,
                        'backdrop': false

                    });
                },
                error: function () {

                }
            });

        }
        else if (eventId == 30) {
            urlToDirect = "/TaskVerificationAcc/_VerificationModal";
            $.ajax({
                type: "GET",
                url: urlToDirect,
                data: { task1id: task1id },
                success: function (result) {

                    $('#getTaskVerficationLists').html(result).modal({
                        'show': true,
                        'backdrop': false

                    });
                    //$()
                    //$('.modal-backdrop.in').css('opacity', '0');

                    //$('.modal-backdrop').remove();
                },
                error: function () {

                }
            });
        }
        else {
            $.ajax({
                type: "GET",
                url: urlToDirect,
                data: { task1id: task1id, },
                success: function (result) {
                    debugger;
                    //$('#account-pop-up-div2').html(result).modal({
                    //    'show': true,
                    //    'backdrop': 'static'
                    //});
                    $('#account-pop-up-div3').html(result);
                    $('#account-pop-up-div3').modal('show');

                    //  ErrorAlert("Record Not Found may be already verified or deleted!!")
                },
                error: function () {

                }
            });
        }


    }






    //function directToDeno(task1id, eventId, eventValue) {

    //    debugger;
    //    var urlToDirect;

    //    urlToDirect = "/Teller/UserLimitExceedDetailsVerify";

    //    //rno = eventvalue, eventId = Model.EventId, taskId = Model.Task1Id
    //    $.ajax({
    //        type: "GET",
    //        url: urlToDirect,
    //        data: { rno: rno },
    //        success: function (result) {
    //            debugger;
    //            //account-pop-up-div2
    //            $('#UserExceedLimit').html(result).modal({
    //                'show': true,
    //                'backdrop': 'static'
    //            });

    //        },
    //        error: function () {

    //        }
    //    });


















    //function directToDeno(currencyId, denoInOut) {
    //    debugger;
    //    var urlToDirect;
    //    //Html.RenderAction("DenoTransaction", "Teller", new { currencyId = new CommonService().DefultCurrency(), denoInOut = EDeno.DenoOut.GetDescription() });

    //    urlToDirect = "/TaskVerification/_DenoModalAfterVerification";

    //    $.ajax({
    //        type: "GET",
    //        url: urlToDirect,
    //        data: { currencyId: currencyId, denoInOut: denoInOut },
    //        success: function (result) {
    //            debugger;
    //            $(".content").html(result)
    //        },
    //        error: function () {

    //        }
    //    });
    //}






    $("div.table-cash-limit-exceed").on('click', '.NotVerified', function (e) {
        debugger;
        e.stopImmediatePropagation();
        InfoAlert("First need to be verified", 5000);


    });

    $("div.table-cash-limit-exceed").on('click', '.Verified', function (e) {
        debugger;
        e.stopImmediatePropagation();
        $.ajax({
            type: 'GET',
            url: '/Teller/WithdrawTransactionVerifiedByCashier',
            data: {
                chequeNumber: chequeNumber,
                accId: accountId,
            },
            success: function (result) {

            },
        });

    });


    $("div.table-cash-limit-exceed").on('click', 'input.btnPaging', function (e) {
        debugger;
        e.stopImmediatePropagation();
        var parentContainer = $(this).parents()
        var me = $(this);
        var container = parentContainer.find(".table-cash-limit-exceed")
        var accNo = $('input#AccountNumber').val();
        var url = "?accountNumber=" + accNo;
        getPageNumberBtnAction(url, container, me)
    });
    $("div.table-cash-limit-exceed").on('change', 'input#pageNo', function (e) {
        debugger;
        e.stopImmediatePropagation();
        var parentContainer = $(this).parents()
        var me = $(this);

        var container = parentContainer.find(".table-cash-limit-exceed")
        var accNo = $('input#AccountNumber').val();
        var url = "?accountNumber=" + accNo;
        getPageNumberChangeData(url, container, me)
    });
    $("div.table-cash-limit-exceed").on('change', 'input#pageSize', function (e) {
        debugger;
        e.stopImmediatePropagation();
        var parentContainer = $(this).parents()
        var me = $(this);

        var container = parentContainer.find(".table-cash-limit-exceed")
        var accNo = $('input#AccountNumber').val();
        var url = "?accountNumber=" + accNo;
        getPageSizeChangeData(url, container, me)
    });

</script>



